---
# Fail the play if running on an unsupported platform
- name: Assert platform is supported
  tags: gitolite
  assert:
    that:
      - ansible_os_family in ['Debian', 'RedHat']


# manage installation of required packages
- name: Call vars
  include_vars: "{{ ansible_os_family }}.yml"
  tags: gitolite

# manage SELinux
#- include: selinux.yml
#  tags: gitolite

- name: Install required packages for gitolite
  tags: gitolite
  apt:
    pkg: "{{ gitolite_package_list }}"
    state: present

# create gitolite user and group
#   group
- name: Create gitolite group
  tags: gitolite
  group:
    state: present
    name: "{{ gitolite_user_group }}"
    system: yes
#   user
- name: Create gitolite user
  tags: gitolite
  user:
    state: present
    name: "{{ gitolite_user_name }}"
    group: "{{ gitolite_user_group }}"
    home: "{{ gitolite_user_home }}"
    createhome: yes
    generate_ssh_key: yes
    ssh_key_bits: 4096
    ssh_key_type: rsa
    ssh_key_comment: "Gitolite Service"


# manage gitolite users' ssh configuration
- name: Install gitolite ssh configuration
  tags: gitolite
  template:
    src: ssh_config.j2
    dest: "{{ gitolite_user_home }}/.ssh/config"
    mode: 0600
    owner: "{{ gitolite_user_name }}"
    group: "{{ gitolite_user_group }}"

# manage gitolite users' git configuration
- name: Install gitolite git configuration
  tags: gitolite
  template:
    src: gitconfig.j2
    dest: "{{ gitolite_user_home }}/.gitconfig"
    mode: 0600
    owner: "{{ gitolite_user_name }}"
    group: "{{ gitolite_user_group }}"


# setup gitolite
- name: Install gitolite directory
  tags: gitolite
  file:
    state: directory
    dest: "{{ gitolite_install_dir }}"
    mode: 0755
    owner: root
    group: root

- name: git clone gitolite
  tags: gitolite
  git:
    force: yes
    repo: "{{ gitolite_url }}"
    version: "{{ gitolite_tag }}"
    remote: github
    dest: /usr/local/src/gitolite

- name: Install gitolite
  tags: gitolite
  command: "/usr/local/src/gitolite/install -to {{ gitolite_install_dir }}"
  args:
    creates: "{{ gitolite_install_dir }}/gitolite"

- name: Install gitolite configuration
  tags: gitolite
  notify: gitolite setup
  template:
    src: gitolite.rc.j2
    dest: "{{ gitolite_user_home }}/.gitolite.rc"
    mode: 0640
    owner: "{{ gitolite_user_name }}"
    group: "{{ gitolite_user_group }}"

- name: Install gitolite shell user list
  tags: gitolite
  when: gitolite_gitoliterc_shell_user_list|count != 0
  template:
    src: gitolite.rc.shell_user.j2
    dest: "{{ gitolite_user_home }}/.gitolite.rc.shell_user"
    mode: 0640
    owner: "{{ gitolite_user_name }}"
    group: "{{ gitolite_user_group }}"

- name: Initialize gitolite
  tags: gitolite
  command: "{{ gitolite_install_dir }}/gitolite setup -pk {{ gitolite_user_home }}/.ssh/id_rsa.pub"
  become: yes
  become_user: "{{ gitolite_user_name }}"
  args:
    chdir: "{{ gitolite_user_home }}"
    creates: "{{ gitolite_user_home }}/.gitolite"

# configure smart-https for gitolite
#- include: https.yml
#  tags: gitolite
#  when: gitolite_https_enable


# manage gitolite installation
- include: admin.yml
  tags: gitolite
  when:
    - gitolite_repositories|count != 0
    - gitolite_repositories_custom|count != 0
